/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.wordsearcher.Alphagram', null, global);
goog.exportSymbol('proto.wordsearcher.AnagramRequest', null, global);
goog.exportSymbol('proto.wordsearcher.AnagramRequest.Mode', null, global);
goog.exportSymbol('proto.wordsearcher.AnagramResponse', null, global);
goog.exportSymbol('proto.wordsearcher.BlankChallengeCreateRequest', null, global);
goog.exportSymbol('proto.wordsearcher.BuildChallengeCreateRequest', null, global);
goog.exportSymbol('proto.wordsearcher.SearchRequest', null, global);
goog.exportSymbol('proto.wordsearcher.SearchRequest.Condition', null, global);
goog.exportSymbol('proto.wordsearcher.SearchRequest.MinMax', null, global);
goog.exportSymbol('proto.wordsearcher.SearchRequest.NotInLexCondition', null, global);
goog.exportSymbol('proto.wordsearcher.SearchRequest.NumberArray', null, global);
goog.exportSymbol('proto.wordsearcher.SearchRequest.NumberValue', null, global);
goog.exportSymbol('proto.wordsearcher.SearchRequest.SearchParam', null, global);
goog.exportSymbol('proto.wordsearcher.SearchRequest.StringArray', null, global);
goog.exportSymbol('proto.wordsearcher.SearchRequest.StringValue', null, global);
goog.exportSymbol('proto.wordsearcher.SearchResponse', null, global);
goog.exportSymbol('proto.wordsearcher.Word', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wordsearcher.Alphagram = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.wordsearcher.Alphagram.repeatedFields_, null);
};
goog.inherits(proto.wordsearcher.Alphagram, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wordsearcher.Alphagram.displayName = 'proto.wordsearcher.Alphagram';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wordsearcher.Word = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wordsearcher.Word, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wordsearcher.Word.displayName = 'proto.wordsearcher.Word';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wordsearcher.SearchRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.wordsearcher.SearchRequest.repeatedFields_, null);
};
goog.inherits(proto.wordsearcher.SearchRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wordsearcher.SearchRequest.displayName = 'proto.wordsearcher.SearchRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wordsearcher.SearchRequest.MinMax = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wordsearcher.SearchRequest.MinMax, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wordsearcher.SearchRequest.MinMax.displayName = 'proto.wordsearcher.SearchRequest.MinMax';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wordsearcher.SearchRequest.StringValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wordsearcher.SearchRequest.StringValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wordsearcher.SearchRequest.StringValue.displayName = 'proto.wordsearcher.SearchRequest.StringValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wordsearcher.SearchRequest.StringArray = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.wordsearcher.SearchRequest.StringArray.repeatedFields_, null);
};
goog.inherits(proto.wordsearcher.SearchRequest.StringArray, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wordsearcher.SearchRequest.StringArray.displayName = 'proto.wordsearcher.SearchRequest.StringArray';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wordsearcher.SearchRequest.NumberArray = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.wordsearcher.SearchRequest.NumberArray.repeatedFields_, null);
};
goog.inherits(proto.wordsearcher.SearchRequest.NumberArray, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wordsearcher.SearchRequest.NumberArray.displayName = 'proto.wordsearcher.SearchRequest.NumberArray';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wordsearcher.SearchRequest.NumberValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wordsearcher.SearchRequest.NumberValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wordsearcher.SearchRequest.NumberValue.displayName = 'proto.wordsearcher.SearchRequest.NumberValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wordsearcher.SearchRequest.SearchParam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.wordsearcher.SearchRequest.SearchParam.oneofGroups_);
};
goog.inherits(proto.wordsearcher.SearchRequest.SearchParam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wordsearcher.SearchRequest.SearchParam.displayName = 'proto.wordsearcher.SearchRequest.SearchParam';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wordsearcher.SearchResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.wordsearcher.SearchResponse.repeatedFields_, null);
};
goog.inherits(proto.wordsearcher.SearchResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wordsearcher.SearchResponse.displayName = 'proto.wordsearcher.SearchResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wordsearcher.AnagramRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wordsearcher.AnagramRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wordsearcher.AnagramRequest.displayName = 'proto.wordsearcher.AnagramRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wordsearcher.AnagramResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.wordsearcher.AnagramResponse.repeatedFields_, null);
};
goog.inherits(proto.wordsearcher.AnagramResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wordsearcher.AnagramResponse.displayName = 'proto.wordsearcher.AnagramResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wordsearcher.BlankChallengeCreateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wordsearcher.BlankChallengeCreateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wordsearcher.BlankChallengeCreateRequest.displayName = 'proto.wordsearcher.BlankChallengeCreateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wordsearcher.BuildChallengeCreateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wordsearcher.BuildChallengeCreateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wordsearcher.BuildChallengeCreateRequest.displayName = 'proto.wordsearcher.BuildChallengeCreateRequest';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.wordsearcher.Alphagram.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wordsearcher.Alphagram.prototype.toObject = function(opt_includeInstance) {
  return proto.wordsearcher.Alphagram.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wordsearcher.Alphagram} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wordsearcher.Alphagram.toObject = function(includeInstance, msg) {
  var f, obj = {
    alphagram: jspb.Message.getFieldWithDefault(msg, 1, ""),
    wordsList: jspb.Message.toObjectList(msg.getWordsList(),
    proto.wordsearcher.Word.toObject, includeInstance),
    expandedrepr: jspb.Message.getFieldWithDefault(msg, 3, false),
    length: jspb.Message.getFieldWithDefault(msg, 4, 0),
    probability: jspb.Message.getFieldWithDefault(msg, 5, 0),
    combinations: jspb.Message.getFieldWithDefault(msg, 6, 0),
    difficulty: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wordsearcher.Alphagram}
 */
proto.wordsearcher.Alphagram.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wordsearcher.Alphagram;
  return proto.wordsearcher.Alphagram.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wordsearcher.Alphagram} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wordsearcher.Alphagram}
 */
proto.wordsearcher.Alphagram.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlphagram(value);
      break;
    case 2:
      var value = new proto.wordsearcher.Word;
      reader.readMessage(value,proto.wordsearcher.Word.deserializeBinaryFromReader);
      msg.addWords(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExpandedrepr(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLength(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProbability(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCombinations(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDifficulty(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wordsearcher.Alphagram.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wordsearcher.Alphagram.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wordsearcher.Alphagram} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wordsearcher.Alphagram.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAlphagram();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getWordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.wordsearcher.Word.serializeBinaryToWriter
    );
  }
  f = message.getExpandedrepr();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getLength();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getProbability();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getCombinations();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getDifficulty();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * optional string alphagram = 1;
 * @return {string}
 */
proto.wordsearcher.Alphagram.prototype.getAlphagram = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.wordsearcher.Alphagram.prototype.setAlphagram = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Word words = 2;
 * @return {!Array<!proto.wordsearcher.Word>}
 */
proto.wordsearcher.Alphagram.prototype.getWordsList = function() {
  return /** @type{!Array<!proto.wordsearcher.Word>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.wordsearcher.Word, 2));
};


/** @param {!Array<!proto.wordsearcher.Word>} value */
proto.wordsearcher.Alphagram.prototype.setWordsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.wordsearcher.Word=} opt_value
 * @param {number=} opt_index
 * @return {!proto.wordsearcher.Word}
 */
proto.wordsearcher.Alphagram.prototype.addWords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.wordsearcher.Word, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.wordsearcher.Alphagram.prototype.clearWordsList = function() {
  this.setWordsList([]);
};


/**
 * optional bool expandedRepr = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.wordsearcher.Alphagram.prototype.getExpandedrepr = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.wordsearcher.Alphagram.prototype.setExpandedrepr = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional int32 length = 4;
 * @return {number}
 */
proto.wordsearcher.Alphagram.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.wordsearcher.Alphagram.prototype.setLength = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 probability = 5;
 * @return {number}
 */
proto.wordsearcher.Alphagram.prototype.getProbability = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.wordsearcher.Alphagram.prototype.setProbability = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 combinations = 6;
 * @return {number}
 */
proto.wordsearcher.Alphagram.prototype.getCombinations = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.wordsearcher.Alphagram.prototype.setCombinations = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 difficulty = 7;
 * @return {number}
 */
proto.wordsearcher.Alphagram.prototype.getDifficulty = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.wordsearcher.Alphagram.prototype.setDifficulty = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wordsearcher.Word.prototype.toObject = function(opt_includeInstance) {
  return proto.wordsearcher.Word.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wordsearcher.Word} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wordsearcher.Word.toObject = function(includeInstance, msg) {
  var f, obj = {
    word: jspb.Message.getFieldWithDefault(msg, 1, ""),
    alphagram: jspb.Message.getFieldWithDefault(msg, 2, ""),
    definition: jspb.Message.getFieldWithDefault(msg, 3, ""),
    frontHooks: jspb.Message.getFieldWithDefault(msg, 4, ""),
    backHooks: jspb.Message.getFieldWithDefault(msg, 5, ""),
    lexiconSymbols: jspb.Message.getFieldWithDefault(msg, 6, ""),
    innerFrontHook: jspb.Message.getFieldWithDefault(msg, 7, false),
    innerBackHook: jspb.Message.getFieldWithDefault(msg, 8, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wordsearcher.Word}
 */
proto.wordsearcher.Word.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wordsearcher.Word;
  return proto.wordsearcher.Word.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wordsearcher.Word} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wordsearcher.Word}
 */
proto.wordsearcher.Word.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWord(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlphagram(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefinition(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrontHooks(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBackHooks(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setLexiconSymbols(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInnerFrontHook(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInnerBackHook(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wordsearcher.Word.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wordsearcher.Word.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wordsearcher.Word} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wordsearcher.Word.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWord();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAlphagram();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDefinition();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFrontHooks();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getBackHooks();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getLexiconSymbols();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getInnerFrontHook();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getInnerBackHook();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
};


/**
 * optional string word = 1;
 * @return {string}
 */
proto.wordsearcher.Word.prototype.getWord = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.wordsearcher.Word.prototype.setWord = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string alphagram = 2;
 * @return {string}
 */
proto.wordsearcher.Word.prototype.getAlphagram = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.wordsearcher.Word.prototype.setAlphagram = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string definition = 3;
 * @return {string}
 */
proto.wordsearcher.Word.prototype.getDefinition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.wordsearcher.Word.prototype.setDefinition = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string front_hooks = 4;
 * @return {string}
 */
proto.wordsearcher.Word.prototype.getFrontHooks = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.wordsearcher.Word.prototype.setFrontHooks = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string back_hooks = 5;
 * @return {string}
 */
proto.wordsearcher.Word.prototype.getBackHooks = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.wordsearcher.Word.prototype.setBackHooks = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string lexicon_symbols = 6;
 * @return {string}
 */
proto.wordsearcher.Word.prototype.getLexiconSymbols = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.wordsearcher.Word.prototype.setLexiconSymbols = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional bool inner_front_hook = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.wordsearcher.Word.prototype.getInnerFrontHook = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.wordsearcher.Word.prototype.setInnerFrontHook = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool inner_back_hook = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.wordsearcher.Word.prototype.getInnerBackHook = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.wordsearcher.Word.prototype.setInnerBackHook = function(value) {
  jspb.Message.setProto3BooleanField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.wordsearcher.SearchRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wordsearcher.SearchRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.wordsearcher.SearchRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wordsearcher.SearchRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wordsearcher.SearchRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    searchparamsList: jspb.Message.toObjectList(msg.getSearchparamsList(),
    proto.wordsearcher.SearchRequest.SearchParam.toObject, includeInstance),
    expand: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wordsearcher.SearchRequest}
 */
proto.wordsearcher.SearchRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wordsearcher.SearchRequest;
  return proto.wordsearcher.SearchRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wordsearcher.SearchRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wordsearcher.SearchRequest}
 */
proto.wordsearcher.SearchRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.wordsearcher.SearchRequest.SearchParam;
      reader.readMessage(value,proto.wordsearcher.SearchRequest.SearchParam.deserializeBinaryFromReader);
      msg.addSearchparams(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExpand(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wordsearcher.SearchRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wordsearcher.SearchRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wordsearcher.SearchRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wordsearcher.SearchRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSearchparamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.wordsearcher.SearchRequest.SearchParam.serializeBinaryToWriter
    );
  }
  f = message.getExpand();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.wordsearcher.SearchRequest.Condition = {
  LEXICON: 0,
  LENGTH: 1,
  PROBABILITY_RANGE: 2,
  PROBABILITY_LIST: 3,
  PROBABILITY_LIMIT: 4,
  NUMBER_OF_ANAGRAMS: 5,
  NUMBER_OF_VOWELS: 6,
  HAS_TAGS: 7,
  POINT_VALUE: 8,
  MATCHING_ANAGRAM: 9,
  ALPHAGRAM_LIST: 10,
  NOT_IN_LEXICON: 11,
  REGEX: 12,
  WORD_LIST: 13,
  SINGLE_VALUE_LENGTH: 14,
  NUM_TWO_BLANKS: 15,
  MAX_SOLUTIONS: 16,
  DIFFICULTY_RANGE: 17,
  PLAYABILITY_RANGE: 18
};

/**
 * @enum {number}
 */
proto.wordsearcher.SearchRequest.NotInLexCondition = {
  OTHER_ENGLISH: 0,
  PREVIOUS_VERSION: 1
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wordsearcher.SearchRequest.MinMax.prototype.toObject = function(opt_includeInstance) {
  return proto.wordsearcher.SearchRequest.MinMax.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wordsearcher.SearchRequest.MinMax} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wordsearcher.SearchRequest.MinMax.toObject = function(includeInstance, msg) {
  var f, obj = {
    min: jspb.Message.getFieldWithDefault(msg, 1, 0),
    max: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wordsearcher.SearchRequest.MinMax}
 */
proto.wordsearcher.SearchRequest.MinMax.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wordsearcher.SearchRequest.MinMax;
  return proto.wordsearcher.SearchRequest.MinMax.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wordsearcher.SearchRequest.MinMax} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wordsearcher.SearchRequest.MinMax}
 */
proto.wordsearcher.SearchRequest.MinMax.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMin(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMax(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wordsearcher.SearchRequest.MinMax.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wordsearcher.SearchRequest.MinMax.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wordsearcher.SearchRequest.MinMax} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wordsearcher.SearchRequest.MinMax.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMin();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMax();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 min = 1;
 * @return {number}
 */
proto.wordsearcher.SearchRequest.MinMax.prototype.getMin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.wordsearcher.SearchRequest.MinMax.prototype.setMin = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 max = 2;
 * @return {number}
 */
proto.wordsearcher.SearchRequest.MinMax.prototype.getMax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.wordsearcher.SearchRequest.MinMax.prototype.setMax = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wordsearcher.SearchRequest.StringValue.prototype.toObject = function(opt_includeInstance) {
  return proto.wordsearcher.SearchRequest.StringValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wordsearcher.SearchRequest.StringValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wordsearcher.SearchRequest.StringValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wordsearcher.SearchRequest.StringValue}
 */
proto.wordsearcher.SearchRequest.StringValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wordsearcher.SearchRequest.StringValue;
  return proto.wordsearcher.SearchRequest.StringValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wordsearcher.SearchRequest.StringValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wordsearcher.SearchRequest.StringValue}
 */
proto.wordsearcher.SearchRequest.StringValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wordsearcher.SearchRequest.StringValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wordsearcher.SearchRequest.StringValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wordsearcher.SearchRequest.StringValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wordsearcher.SearchRequest.StringValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string value = 1;
 * @return {string}
 */
proto.wordsearcher.SearchRequest.StringValue.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.wordsearcher.SearchRequest.StringValue.prototype.setValue = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.wordsearcher.SearchRequest.StringArray.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wordsearcher.SearchRequest.StringArray.prototype.toObject = function(opt_includeInstance) {
  return proto.wordsearcher.SearchRequest.StringArray.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wordsearcher.SearchRequest.StringArray} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wordsearcher.SearchRequest.StringArray.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wordsearcher.SearchRequest.StringArray}
 */
proto.wordsearcher.SearchRequest.StringArray.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wordsearcher.SearchRequest.StringArray;
  return proto.wordsearcher.SearchRequest.StringArray.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wordsearcher.SearchRequest.StringArray} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wordsearcher.SearchRequest.StringArray}
 */
proto.wordsearcher.SearchRequest.StringArray.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wordsearcher.SearchRequest.StringArray.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wordsearcher.SearchRequest.StringArray.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wordsearcher.SearchRequest.StringArray} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wordsearcher.SearchRequest.StringArray.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string values = 1;
 * @return {!Array<string>}
 */
proto.wordsearcher.SearchRequest.StringArray.prototype.getValuesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.wordsearcher.SearchRequest.StringArray.prototype.setValuesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.wordsearcher.SearchRequest.StringArray.prototype.addValues = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.wordsearcher.SearchRequest.StringArray.prototype.clearValuesList = function() {
  this.setValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.wordsearcher.SearchRequest.NumberArray.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wordsearcher.SearchRequest.NumberArray.prototype.toObject = function(opt_includeInstance) {
  return proto.wordsearcher.SearchRequest.NumberArray.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wordsearcher.SearchRequest.NumberArray} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wordsearcher.SearchRequest.NumberArray.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wordsearcher.SearchRequest.NumberArray}
 */
proto.wordsearcher.SearchRequest.NumberArray.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wordsearcher.SearchRequest.NumberArray;
  return proto.wordsearcher.SearchRequest.NumberArray.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wordsearcher.SearchRequest.NumberArray} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wordsearcher.SearchRequest.NumberArray}
 */
proto.wordsearcher.SearchRequest.NumberArray.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setValuesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wordsearcher.SearchRequest.NumberArray.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wordsearcher.SearchRequest.NumberArray.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wordsearcher.SearchRequest.NumberArray} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wordsearcher.SearchRequest.NumberArray.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
};


/**
 * repeated int32 values = 1;
 * @return {!Array<number>}
 */
proto.wordsearcher.SearchRequest.NumberArray.prototype.getValuesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<number>} value */
proto.wordsearcher.SearchRequest.NumberArray.prototype.setValuesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.wordsearcher.SearchRequest.NumberArray.prototype.addValues = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.wordsearcher.SearchRequest.NumberArray.prototype.clearValuesList = function() {
  this.setValuesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wordsearcher.SearchRequest.NumberValue.prototype.toObject = function(opt_includeInstance) {
  return proto.wordsearcher.SearchRequest.NumberValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wordsearcher.SearchRequest.NumberValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wordsearcher.SearchRequest.NumberValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wordsearcher.SearchRequest.NumberValue}
 */
proto.wordsearcher.SearchRequest.NumberValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wordsearcher.SearchRequest.NumberValue;
  return proto.wordsearcher.SearchRequest.NumberValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wordsearcher.SearchRequest.NumberValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wordsearcher.SearchRequest.NumberValue}
 */
proto.wordsearcher.SearchRequest.NumberValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wordsearcher.SearchRequest.NumberValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wordsearcher.SearchRequest.NumberValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wordsearcher.SearchRequest.NumberValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wordsearcher.SearchRequest.NumberValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 value = 1;
 * @return {number}
 */
proto.wordsearcher.SearchRequest.NumberValue.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.wordsearcher.SearchRequest.NumberValue.prototype.setValue = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.wordsearcher.SearchRequest.SearchParam.oneofGroups_ = [[2,3,4,5,6]];

/**
 * @enum {number}
 */
proto.wordsearcher.SearchRequest.SearchParam.ConditionparamCase = {
  CONDITIONPARAM_NOT_SET: 0,
  MINMAX: 2,
  STRINGVALUE: 3,
  STRINGARRAY: 4,
  NUMBERARRAY: 5,
  NUMBERVALUE: 6
};

/**
 * @return {proto.wordsearcher.SearchRequest.SearchParam.ConditionparamCase}
 */
proto.wordsearcher.SearchRequest.SearchParam.prototype.getConditionparamCase = function() {
  return /** @type {proto.wordsearcher.SearchRequest.SearchParam.ConditionparamCase} */(jspb.Message.computeOneofCase(this, proto.wordsearcher.SearchRequest.SearchParam.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wordsearcher.SearchRequest.SearchParam.prototype.toObject = function(opt_includeInstance) {
  return proto.wordsearcher.SearchRequest.SearchParam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wordsearcher.SearchRequest.SearchParam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wordsearcher.SearchRequest.SearchParam.toObject = function(includeInstance, msg) {
  var f, obj = {
    condition: jspb.Message.getFieldWithDefault(msg, 1, 0),
    minmax: (f = msg.getMinmax()) && proto.wordsearcher.SearchRequest.MinMax.toObject(includeInstance, f),
    stringvalue: (f = msg.getStringvalue()) && proto.wordsearcher.SearchRequest.StringValue.toObject(includeInstance, f),
    stringarray: (f = msg.getStringarray()) && proto.wordsearcher.SearchRequest.StringArray.toObject(includeInstance, f),
    numberarray: (f = msg.getNumberarray()) && proto.wordsearcher.SearchRequest.NumberArray.toObject(includeInstance, f),
    numbervalue: (f = msg.getNumbervalue()) && proto.wordsearcher.SearchRequest.NumberValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wordsearcher.SearchRequest.SearchParam}
 */
proto.wordsearcher.SearchRequest.SearchParam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wordsearcher.SearchRequest.SearchParam;
  return proto.wordsearcher.SearchRequest.SearchParam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wordsearcher.SearchRequest.SearchParam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wordsearcher.SearchRequest.SearchParam}
 */
proto.wordsearcher.SearchRequest.SearchParam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.wordsearcher.SearchRequest.Condition} */ (reader.readEnum());
      msg.setCondition(value);
      break;
    case 2:
      var value = new proto.wordsearcher.SearchRequest.MinMax;
      reader.readMessage(value,proto.wordsearcher.SearchRequest.MinMax.deserializeBinaryFromReader);
      msg.setMinmax(value);
      break;
    case 3:
      var value = new proto.wordsearcher.SearchRequest.StringValue;
      reader.readMessage(value,proto.wordsearcher.SearchRequest.StringValue.deserializeBinaryFromReader);
      msg.setStringvalue(value);
      break;
    case 4:
      var value = new proto.wordsearcher.SearchRequest.StringArray;
      reader.readMessage(value,proto.wordsearcher.SearchRequest.StringArray.deserializeBinaryFromReader);
      msg.setStringarray(value);
      break;
    case 5:
      var value = new proto.wordsearcher.SearchRequest.NumberArray;
      reader.readMessage(value,proto.wordsearcher.SearchRequest.NumberArray.deserializeBinaryFromReader);
      msg.setNumberarray(value);
      break;
    case 6:
      var value = new proto.wordsearcher.SearchRequest.NumberValue;
      reader.readMessage(value,proto.wordsearcher.SearchRequest.NumberValue.deserializeBinaryFromReader);
      msg.setNumbervalue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wordsearcher.SearchRequest.SearchParam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wordsearcher.SearchRequest.SearchParam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wordsearcher.SearchRequest.SearchParam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wordsearcher.SearchRequest.SearchParam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCondition();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMinmax();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.wordsearcher.SearchRequest.MinMax.serializeBinaryToWriter
    );
  }
  f = message.getStringvalue();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.wordsearcher.SearchRequest.StringValue.serializeBinaryToWriter
    );
  }
  f = message.getStringarray();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.wordsearcher.SearchRequest.StringArray.serializeBinaryToWriter
    );
  }
  f = message.getNumberarray();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.wordsearcher.SearchRequest.NumberArray.serializeBinaryToWriter
    );
  }
  f = message.getNumbervalue();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.wordsearcher.SearchRequest.NumberValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional Condition condition = 1;
 * @return {!proto.wordsearcher.SearchRequest.Condition}
 */
proto.wordsearcher.SearchRequest.SearchParam.prototype.getCondition = function() {
  return /** @type {!proto.wordsearcher.SearchRequest.Condition} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.wordsearcher.SearchRequest.Condition} value */
proto.wordsearcher.SearchRequest.SearchParam.prototype.setCondition = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional MinMax minmax = 2;
 * @return {?proto.wordsearcher.SearchRequest.MinMax}
 */
proto.wordsearcher.SearchRequest.SearchParam.prototype.getMinmax = function() {
  return /** @type{?proto.wordsearcher.SearchRequest.MinMax} */ (
    jspb.Message.getWrapperField(this, proto.wordsearcher.SearchRequest.MinMax, 2));
};


/** @param {?proto.wordsearcher.SearchRequest.MinMax|undefined} value */
proto.wordsearcher.SearchRequest.SearchParam.prototype.setMinmax = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.wordsearcher.SearchRequest.SearchParam.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.wordsearcher.SearchRequest.SearchParam.prototype.clearMinmax = function() {
  this.setMinmax(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.wordsearcher.SearchRequest.SearchParam.prototype.hasMinmax = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional StringValue stringvalue = 3;
 * @return {?proto.wordsearcher.SearchRequest.StringValue}
 */
proto.wordsearcher.SearchRequest.SearchParam.prototype.getStringvalue = function() {
  return /** @type{?proto.wordsearcher.SearchRequest.StringValue} */ (
    jspb.Message.getWrapperField(this, proto.wordsearcher.SearchRequest.StringValue, 3));
};


/** @param {?proto.wordsearcher.SearchRequest.StringValue|undefined} value */
proto.wordsearcher.SearchRequest.SearchParam.prototype.setStringvalue = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.wordsearcher.SearchRequest.SearchParam.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.wordsearcher.SearchRequest.SearchParam.prototype.clearStringvalue = function() {
  this.setStringvalue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.wordsearcher.SearchRequest.SearchParam.prototype.hasStringvalue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional StringArray stringarray = 4;
 * @return {?proto.wordsearcher.SearchRequest.StringArray}
 */
proto.wordsearcher.SearchRequest.SearchParam.prototype.getStringarray = function() {
  return /** @type{?proto.wordsearcher.SearchRequest.StringArray} */ (
    jspb.Message.getWrapperField(this, proto.wordsearcher.SearchRequest.StringArray, 4));
};


/** @param {?proto.wordsearcher.SearchRequest.StringArray|undefined} value */
proto.wordsearcher.SearchRequest.SearchParam.prototype.setStringarray = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.wordsearcher.SearchRequest.SearchParam.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.wordsearcher.SearchRequest.SearchParam.prototype.clearStringarray = function() {
  this.setStringarray(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.wordsearcher.SearchRequest.SearchParam.prototype.hasStringarray = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional NumberArray numberarray = 5;
 * @return {?proto.wordsearcher.SearchRequest.NumberArray}
 */
proto.wordsearcher.SearchRequest.SearchParam.prototype.getNumberarray = function() {
  return /** @type{?proto.wordsearcher.SearchRequest.NumberArray} */ (
    jspb.Message.getWrapperField(this, proto.wordsearcher.SearchRequest.NumberArray, 5));
};


/** @param {?proto.wordsearcher.SearchRequest.NumberArray|undefined} value */
proto.wordsearcher.SearchRequest.SearchParam.prototype.setNumberarray = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.wordsearcher.SearchRequest.SearchParam.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.wordsearcher.SearchRequest.SearchParam.prototype.clearNumberarray = function() {
  this.setNumberarray(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.wordsearcher.SearchRequest.SearchParam.prototype.hasNumberarray = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional NumberValue numbervalue = 6;
 * @return {?proto.wordsearcher.SearchRequest.NumberValue}
 */
proto.wordsearcher.SearchRequest.SearchParam.prototype.getNumbervalue = function() {
  return /** @type{?proto.wordsearcher.SearchRequest.NumberValue} */ (
    jspb.Message.getWrapperField(this, proto.wordsearcher.SearchRequest.NumberValue, 6));
};


/** @param {?proto.wordsearcher.SearchRequest.NumberValue|undefined} value */
proto.wordsearcher.SearchRequest.SearchParam.prototype.setNumbervalue = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.wordsearcher.SearchRequest.SearchParam.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.wordsearcher.SearchRequest.SearchParam.prototype.clearNumbervalue = function() {
  this.setNumbervalue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.wordsearcher.SearchRequest.SearchParam.prototype.hasNumbervalue = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated SearchParam searchparams = 1;
 * @return {!Array<!proto.wordsearcher.SearchRequest.SearchParam>}
 */
proto.wordsearcher.SearchRequest.prototype.getSearchparamsList = function() {
  return /** @type{!Array<!proto.wordsearcher.SearchRequest.SearchParam>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.wordsearcher.SearchRequest.SearchParam, 1));
};


/** @param {!Array<!proto.wordsearcher.SearchRequest.SearchParam>} value */
proto.wordsearcher.SearchRequest.prototype.setSearchparamsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.wordsearcher.SearchRequest.SearchParam=} opt_value
 * @param {number=} opt_index
 * @return {!proto.wordsearcher.SearchRequest.SearchParam}
 */
proto.wordsearcher.SearchRequest.prototype.addSearchparams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.wordsearcher.SearchRequest.SearchParam, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.wordsearcher.SearchRequest.prototype.clearSearchparamsList = function() {
  this.setSearchparamsList([]);
};


/**
 * optional bool expand = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.wordsearcher.SearchRequest.prototype.getExpand = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.wordsearcher.SearchRequest.prototype.setExpand = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.wordsearcher.SearchResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wordsearcher.SearchResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.wordsearcher.SearchResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wordsearcher.SearchResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wordsearcher.SearchResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    alphagramsList: jspb.Message.toObjectList(msg.getAlphagramsList(),
    proto.wordsearcher.Alphagram.toObject, includeInstance),
    lexicon: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wordsearcher.SearchResponse}
 */
proto.wordsearcher.SearchResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wordsearcher.SearchResponse;
  return proto.wordsearcher.SearchResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wordsearcher.SearchResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wordsearcher.SearchResponse}
 */
proto.wordsearcher.SearchResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.wordsearcher.Alphagram;
      reader.readMessage(value,proto.wordsearcher.Alphagram.deserializeBinaryFromReader);
      msg.addAlphagrams(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLexicon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wordsearcher.SearchResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wordsearcher.SearchResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wordsearcher.SearchResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wordsearcher.SearchResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAlphagramsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.wordsearcher.Alphagram.serializeBinaryToWriter
    );
  }
  f = message.getLexicon();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated Alphagram alphagrams = 1;
 * @return {!Array<!proto.wordsearcher.Alphagram>}
 */
proto.wordsearcher.SearchResponse.prototype.getAlphagramsList = function() {
  return /** @type{!Array<!proto.wordsearcher.Alphagram>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.wordsearcher.Alphagram, 1));
};


/** @param {!Array<!proto.wordsearcher.Alphagram>} value */
proto.wordsearcher.SearchResponse.prototype.setAlphagramsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.wordsearcher.Alphagram=} opt_value
 * @param {number=} opt_index
 * @return {!proto.wordsearcher.Alphagram}
 */
proto.wordsearcher.SearchResponse.prototype.addAlphagrams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.wordsearcher.Alphagram, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.wordsearcher.SearchResponse.prototype.clearAlphagramsList = function() {
  this.setAlphagramsList([]);
};


/**
 * optional string lexicon = 2;
 * @return {string}
 */
proto.wordsearcher.SearchResponse.prototype.getLexicon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.wordsearcher.SearchResponse.prototype.setLexicon = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wordsearcher.AnagramRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.wordsearcher.AnagramRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wordsearcher.AnagramRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wordsearcher.AnagramRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    lexicon: jspb.Message.getFieldWithDefault(msg, 1, ""),
    letters: jspb.Message.getFieldWithDefault(msg, 2, ""),
    mode: jspb.Message.getFieldWithDefault(msg, 3, 0),
    expand: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wordsearcher.AnagramRequest}
 */
proto.wordsearcher.AnagramRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wordsearcher.AnagramRequest;
  return proto.wordsearcher.AnagramRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wordsearcher.AnagramRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wordsearcher.AnagramRequest}
 */
proto.wordsearcher.AnagramRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLexicon(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLetters(value);
      break;
    case 3:
      var value = /** @type {!proto.wordsearcher.AnagramRequest.Mode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExpand(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wordsearcher.AnagramRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wordsearcher.AnagramRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wordsearcher.AnagramRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wordsearcher.AnagramRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLexicon();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLetters();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getExpand();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.wordsearcher.AnagramRequest.Mode = {
  EXACT: 0,
  BUILD: 1
};

/**
 * optional string lexicon = 1;
 * @return {string}
 */
proto.wordsearcher.AnagramRequest.prototype.getLexicon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.wordsearcher.AnagramRequest.prototype.setLexicon = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string letters = 2;
 * @return {string}
 */
proto.wordsearcher.AnagramRequest.prototype.getLetters = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.wordsearcher.AnagramRequest.prototype.setLetters = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Mode mode = 3;
 * @return {!proto.wordsearcher.AnagramRequest.Mode}
 */
proto.wordsearcher.AnagramRequest.prototype.getMode = function() {
  return /** @type {!proto.wordsearcher.AnagramRequest.Mode} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.wordsearcher.AnagramRequest.Mode} value */
proto.wordsearcher.AnagramRequest.prototype.setMode = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bool expand = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.wordsearcher.AnagramRequest.prototype.getExpand = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.wordsearcher.AnagramRequest.prototype.setExpand = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.wordsearcher.AnagramResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wordsearcher.AnagramResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.wordsearcher.AnagramResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wordsearcher.AnagramResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wordsearcher.AnagramResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    wordsList: jspb.Message.toObjectList(msg.getWordsList(),
    proto.wordsearcher.Word.toObject, includeInstance),
    numWords: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wordsearcher.AnagramResponse}
 */
proto.wordsearcher.AnagramResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wordsearcher.AnagramResponse;
  return proto.wordsearcher.AnagramResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wordsearcher.AnagramResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wordsearcher.AnagramResponse}
 */
proto.wordsearcher.AnagramResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.wordsearcher.Word;
      reader.readMessage(value,proto.wordsearcher.Word.deserializeBinaryFromReader);
      msg.addWords(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumWords(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wordsearcher.AnagramResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wordsearcher.AnagramResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wordsearcher.AnagramResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wordsearcher.AnagramResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.wordsearcher.Word.serializeBinaryToWriter
    );
  }
  f = message.getNumWords();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * repeated Word words = 1;
 * @return {!Array<!proto.wordsearcher.Word>}
 */
proto.wordsearcher.AnagramResponse.prototype.getWordsList = function() {
  return /** @type{!Array<!proto.wordsearcher.Word>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.wordsearcher.Word, 1));
};


/** @param {!Array<!proto.wordsearcher.Word>} value */
proto.wordsearcher.AnagramResponse.prototype.setWordsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.wordsearcher.Word=} opt_value
 * @param {number=} opt_index
 * @return {!proto.wordsearcher.Word}
 */
proto.wordsearcher.AnagramResponse.prototype.addWords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.wordsearcher.Word, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.wordsearcher.AnagramResponse.prototype.clearWordsList = function() {
  this.setWordsList([]);
};


/**
 * optional int32 num_words = 2;
 * @return {number}
 */
proto.wordsearcher.AnagramResponse.prototype.getNumWords = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.wordsearcher.AnagramResponse.prototype.setNumWords = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wordsearcher.BlankChallengeCreateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.wordsearcher.BlankChallengeCreateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wordsearcher.BlankChallengeCreateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wordsearcher.BlankChallengeCreateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    lexicon: jspb.Message.getFieldWithDefault(msg, 1, ""),
    numQuestions: jspb.Message.getFieldWithDefault(msg, 2, 0),
    maxSolutions: jspb.Message.getFieldWithDefault(msg, 3, 0),
    numWith2Blanks: jspb.Message.getFieldWithDefault(msg, 4, 0),
    wordLength: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wordsearcher.BlankChallengeCreateRequest}
 */
proto.wordsearcher.BlankChallengeCreateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wordsearcher.BlankChallengeCreateRequest;
  return proto.wordsearcher.BlankChallengeCreateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wordsearcher.BlankChallengeCreateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wordsearcher.BlankChallengeCreateRequest}
 */
proto.wordsearcher.BlankChallengeCreateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLexicon(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumQuestions(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxSolutions(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumWith2Blanks(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWordLength(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wordsearcher.BlankChallengeCreateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wordsearcher.BlankChallengeCreateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wordsearcher.BlankChallengeCreateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wordsearcher.BlankChallengeCreateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLexicon();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNumQuestions();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getMaxSolutions();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getNumWith2Blanks();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getWordLength();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional string lexicon = 1;
 * @return {string}
 */
proto.wordsearcher.BlankChallengeCreateRequest.prototype.getLexicon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.wordsearcher.BlankChallengeCreateRequest.prototype.setLexicon = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 num_questions = 2;
 * @return {number}
 */
proto.wordsearcher.BlankChallengeCreateRequest.prototype.getNumQuestions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.wordsearcher.BlankChallengeCreateRequest.prototype.setNumQuestions = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 max_solutions = 3;
 * @return {number}
 */
proto.wordsearcher.BlankChallengeCreateRequest.prototype.getMaxSolutions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.wordsearcher.BlankChallengeCreateRequest.prototype.setMaxSolutions = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 num_with_2_blanks = 4;
 * @return {number}
 */
proto.wordsearcher.BlankChallengeCreateRequest.prototype.getNumWith2Blanks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.wordsearcher.BlankChallengeCreateRequest.prototype.setNumWith2Blanks = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 word_length = 5;
 * @return {number}
 */
proto.wordsearcher.BlankChallengeCreateRequest.prototype.getWordLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.wordsearcher.BlankChallengeCreateRequest.prototype.setWordLength = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wordsearcher.BuildChallengeCreateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.wordsearcher.BuildChallengeCreateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wordsearcher.BuildChallengeCreateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wordsearcher.BuildChallengeCreateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    lexicon: jspb.Message.getFieldWithDefault(msg, 1, ""),
    minSolutions: jspb.Message.getFieldWithDefault(msg, 2, 0),
    maxSolutions: jspb.Message.getFieldWithDefault(msg, 3, 0),
    minLength: jspb.Message.getFieldWithDefault(msg, 4, 0),
    maxLength: jspb.Message.getFieldWithDefault(msg, 5, 0),
    requireLengthSolution: jspb.Message.getFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wordsearcher.BuildChallengeCreateRequest}
 */
proto.wordsearcher.BuildChallengeCreateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wordsearcher.BuildChallengeCreateRequest;
  return proto.wordsearcher.BuildChallengeCreateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wordsearcher.BuildChallengeCreateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wordsearcher.BuildChallengeCreateRequest}
 */
proto.wordsearcher.BuildChallengeCreateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLexicon(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinSolutions(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxSolutions(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinLength(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxLength(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRequireLengthSolution(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wordsearcher.BuildChallengeCreateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wordsearcher.BuildChallengeCreateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wordsearcher.BuildChallengeCreateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wordsearcher.BuildChallengeCreateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLexicon();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMinSolutions();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getMaxSolutions();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getMinLength();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getMaxLength();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getRequireLengthSolution();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional string lexicon = 1;
 * @return {string}
 */
proto.wordsearcher.BuildChallengeCreateRequest.prototype.getLexicon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.wordsearcher.BuildChallengeCreateRequest.prototype.setLexicon = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 min_solutions = 2;
 * @return {number}
 */
proto.wordsearcher.BuildChallengeCreateRequest.prototype.getMinSolutions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.wordsearcher.BuildChallengeCreateRequest.prototype.setMinSolutions = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 max_solutions = 3;
 * @return {number}
 */
proto.wordsearcher.BuildChallengeCreateRequest.prototype.getMaxSolutions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.wordsearcher.BuildChallengeCreateRequest.prototype.setMaxSolutions = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 min_length = 4;
 * @return {number}
 */
proto.wordsearcher.BuildChallengeCreateRequest.prototype.getMinLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.wordsearcher.BuildChallengeCreateRequest.prototype.setMinLength = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 max_length = 5;
 * @return {number}
 */
proto.wordsearcher.BuildChallengeCreateRequest.prototype.getMaxLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.wordsearcher.BuildChallengeCreateRequest.prototype.setMaxLength = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool require_length_solution = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.wordsearcher.BuildChallengeCreateRequest.prototype.getRequireLengthSolution = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.wordsearcher.BuildChallengeCreateRequest.prototype.setRequireLengthSolution = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};


goog.object.extend(exports, proto.wordsearcher);
